<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>springboot集成Aop</title>
      <link href="/2020/07/07/springbootaop/"/>
      <url>/2020/07/07/springbootaop/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot应用中使用AOP记录接口访问日志"><a href="#SpringBoot应用中使用AOP记录接口访问日志" class="headerlink" title="SpringBoot应用中使用AOP记录接口访问日志"></a>SpringBoot应用中使用AOP记录接口访问日志</h1><blockquote><p>本文主要讲述AOP在mall项目中的应用，通过在controller层建一个切面来实现接口访问的统一日志记录。</p></blockquote><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><blockquote><p>AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p></blockquote><h3 id="AOP的相关术语"><a href="#AOP的相关术语" class="headerlink" title="AOP的相关术语"></a>AOP的相关术语</h3><h4 id="通知（Advice）"><a href="#通知（Advice）" class="headerlink" title="通知（Advice）"></a>通知（Advice）</h4><p>通知描述了切面要完成的工作以及何时执行。比如我们的日志切面需要记录每个接口调用时长，就需要在接口调用前后分别记录当前时间，再取差值。</p><ul><li>前置通知（Before）：在目标方法调用前调用通知功能；</li><li>后置通知（After）：在目标方法调用之后调用通知功能，不关心方法的返回结果；</li><li>返回通知（AfterReturning）：在目标方法成功执行之后调用通知功能；</li><li>异常通知（AfterThrowing）：在目标方法抛出异常后调用通知功能；</li><li>环绕通知（Around）：通知包裹了目标方法，在目标方法调用之前和之后执行自定义的行为。</li></ul><h4 id="连接点（JoinPoint）"><a href="#连接点（JoinPoint）" class="headerlink" title="连接点（JoinPoint）"></a>连接点（JoinPoint）</h4><p>通知功能被应用的时机。比如接口方法被调用的时候就是日志切面的连接点。</p><h4 id="切点（Pointcut）"><a href="#切点（Pointcut）" class="headerlink" title="切点（Pointcut）"></a>切点（Pointcut）</h4><p>切点定义了通知功能被应用的范围。比如日志切面的应用范围就是所有接口，即所有controller层的接口方法。</p><h4 id="切面（Aspect）"><a href="#切面（Aspect）" class="headerlink" title="切面（Aspect）"></a>切面（Aspect）</h4><p>切面是通知和切点的结合，定义了何时、何地应用通知功能。</p><h4 id="引入（Introduction）"><a href="#引入（Introduction）" class="headerlink" title="引入（Introduction）"></a>引入（Introduction）</h4><p>在无需修改现有类的情况下，向现有的类添加新方法或属性。</p><h4 id="织入（Weaving）"><a href="#织入（Weaving）" class="headerlink" title="织入（Weaving）"></a>织入（Weaving）</h4><p>把切面应用到目标对象并创建新的代理对象的过程。</p><h2 id="Spring中使用注解创建切面"><a href="#Spring中使用注解创建切面" class="headerlink" title="Spring中使用注解创建切面"></a>Spring中使用注解创建切面</h2><h3 id="相关注解"><a href="#相关注解" class="headerlink" title="相关注解"></a>相关注解</h3><ul><li>@Aspect：用于定义切面</li><li>@Before：通知方法会在目标方法调用之前执行</li><li>@After：通知方法会在目标方法返回或抛出异常后执行</li><li>@AfterReturning：通知方法会在目标方法返回后执行</li><li>@AfterThrowing：通知方法会在目标方法抛出异常后执行</li><li>@Around：通知方法会将目标方法封装起来</li><li>@Pointcut：定义切点表达式</li></ul><h3 id="切点表达式"><a href="#切点表达式" class="headerlink" title="切点表达式"></a>切点表达式</h3><p>指定了通知被应用的范围，表达式格式：</p><pre class=" language-java"><code class="language-java"><span class="token function">execution</span><span class="token punctuation">(</span>方法修饰符 返回类型 方法所属的包<span class="token punctuation">.</span>类名<span class="token punctuation">.</span>方法名称<span class="token punctuation">(</span>方法参数<span class="token punctuation">)</span><span class="token punctuation">)</span>    通配符：<span class="token operator">*</span>      <span class="token number">1</span>）匹配一个或多个字符      <span class="token number">2</span>）匹配任意一个参数      <span class="token number">3</span>）只能匹配一层路径      <span class="token number">4</span>）权限位置不能写<span class="token operator">*</span> 权限位置不写就行       <span class="token punctuation">.</span><span class="token punctuation">.</span>      <span class="token number">1</span><span class="token punctuation">)</span>匹配任意多个任意类型的参数      <span class="token number">2</span>）匹配任意多层路径</code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//com.codelnn.mall.controller包中所有类的public方法都应用切面里的通知</span><span class="token function">execution</span><span class="token punctuation">(</span><span class="token keyword">public</span> <span class="token operator">*</span> com<span class="token punctuation">.</span>codelnn<span class="token punctuation">.</span>mall<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//com.codelnn.mall.service包及其子包下所有类中的所有方法都应用切面里的通知</span><span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> com<span class="token punctuation">.</span>codelnn<span class="token punctuation">.</span>mall<span class="token punctuation">.</span>service<span class="token punctuation">.</span><span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//com.codelnn.mall.service.PmsBrandService类中的所有方法都应用切面里的通知</span><span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> com<span class="token punctuation">.</span>codelnn<span class="token punctuation">.</span>mall<span class="token punctuation">.</span>service<span class="token punctuation">.</span>PmsBrandService<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="添加AOP切面实现接口日志记录"><a href="#添加AOP切面实现接口日志记录" class="headerlink" title="添加AOP切面实现接口日志记录"></a>添加AOP切面实现接口日志记录</h2><h3 id="添加日志信息封装类WebLog"><a href="#添加日志信息封装类WebLog" class="headerlink" title="添加日志信息封装类WebLog"></a>添加日志信息封装类WebLog</h3><blockquote><p>用于封装需要记录的日志信息，包括操作的描述、时间、消耗时间、url、请求参数和返回结果等信息。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>codelnn<span class="token punctuation">.</span>mall<span class="token punctuation">.</span>dto<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>NoArgsConstructor<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @description: * @author: znx * @create: 2020-07-05 21:43 **/</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebLog</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 操作描述     */</span>    <span class="token keyword">private</span> String description<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 操作用户     */</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 操作时间     */</span>    <span class="token keyword">private</span> Long startTime<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 消耗时间     */</span>    <span class="token keyword">private</span> Integer spendTime<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根路径     */</span>    <span class="token keyword">private</span> String basePath<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * URI     */</span>    <span class="token keyword">private</span> String uri<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * URL     */</span>    <span class="token keyword">private</span> String url<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 请求类型     */</span>    <span class="token keyword">private</span> String method<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * IP地址     */</span>    <span class="token keyword">private</span> String ip<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 请求参数     */</span>    <span class="token keyword">private</span> Object parameter<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 请求返回的结果     */</span>    <span class="token keyword">private</span> Object result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="添加切面类WebLogAspect"><a href="#添加切面类WebLogAspect" class="headerlink" title="添加切面类WebLogAspect"></a>添加切面类WebLogAspect</h3><blockquote><p>定义了一个日志切面，在环绕通知中获取日志需要的信息，并应用到controller层中所有的public方法中去。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>codelnn<span class="token punctuation">.</span>mall<span class="token punctuation">.</span>component<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>util<span class="token punctuation">.</span>StrUtil<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>util<span class="token punctuation">.</span>URLUtil<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>json<span class="token punctuation">.</span>JSONUtil<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>codelnn<span class="token punctuation">.</span>mall<span class="token punctuation">.</span>dto<span class="token punctuation">.</span>WebLog<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>ApiOperation<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ProceedingJoinPoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Signature<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>MethodSignature<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Order<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestBody<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestParam<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>request<span class="token punctuation">.</span>RequestContextHolder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>request<span class="token punctuation">.</span>ServletRequestAttributes<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Parameter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @description: * @author: znx * @create: 2020-07-05 21:44 **/</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebLogAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(public * com.codelnn.mall.controller.PmsBrandController.listBrand(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">webLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"webLog()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// System.out.println("listBrand开始运行啦！！！！");</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"webLog()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// System.out.println("listBrand 运行完了哈哈哈");</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"webLog()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">around</span><span class="token punctuation">(</span>ProceedingJoinPoint joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable<span class="token punctuation">{</span>        <span class="token keyword">long</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取请求对象</span>        ServletRequestAttributes attributes <span class="token operator">=</span>  <span class="token punctuation">(</span>ServletRequestAttributes<span class="token punctuation">)</span>RequestContextHolder<span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HttpServletRequest request <span class="token operator">=</span>  attributes<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        WebLog webLog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//被切面的方法开始执行</span>        Object result <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Signature signature <span class="token operator">=</span>  joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MethodSignature methodSignature <span class="token operator">=</span> <span class="token punctuation">(</span>MethodSignature<span class="token punctuation">)</span> signature<span class="token punctuation">;</span>        Method method <span class="token operator">=</span> methodSignature<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>ApiOperation<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ApiOperation apiOperation <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>ApiOperation<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            webLog<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span>apiOperation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> endTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String url <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        webLog<span class="token punctuation">.</span><span class="token function">setBasePath</span><span class="token punctuation">(</span>StrUtil<span class="token punctuation">.</span><span class="token function">removeSuffix</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> URLUtil<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        webLog<span class="token punctuation">.</span><span class="token function">setIp</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getRemoteUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        webLog<span class="token punctuation">.</span><span class="token function">setMethod</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取请求参数及其值</span>        webLog<span class="token punctuation">.</span><span class="token function">setParameter</span><span class="token punctuation">(</span><span class="token function">getParameter</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span>joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        webLog<span class="token punctuation">.</span><span class="token function">setResult</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        webLog<span class="token punctuation">.</span><span class="token function">setSpendTime</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        webLog<span class="token punctuation">.</span><span class="token function">setStartTime</span><span class="token punctuation">(</span>startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        webLog<span class="token punctuation">.</span><span class="token function">setUri</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        webLog<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> JSONUtil<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>webLog<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Object <span class="token function">getParameter</span><span class="token punctuation">(</span>Method method<span class="token punctuation">,</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Parameter<span class="token punctuation">[</span><span class="token punctuation">]</span> parameters <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> parameters<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//将RequestBody注解修饰的参数作为请求参数</span>            RequestBody requestBody <span class="token operator">=</span> parameters<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>RequestBody<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>requestBody <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//将RequestParam注解修饰的参数作为请求参数</span>            RequestParam requestParam <span class="token operator">=</span> parameters<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>RequestParam<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>requestParam <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String key <span class="token operator">=</span> parameters<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>requestParam<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//获取请求参数</span>                    key <span class="token operator">=</span> requestParam<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> list<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="疑难点API解析"><a href="#疑难点API解析" class="headerlink" title="疑难点API解析"></a>疑难点API解析</h3><p><code>StrUtil.removeSuffix</code>： 去掉字符串后缀</p><pre class=" language-java"><code class="language-java">String fileName <span class="token operator">=</span> StrUtil<span class="token punctuation">.</span><span class="token function">removeSuffix</span><span class="token punctuation">(</span><span class="token string">"pretty_girl.jpg"</span><span class="token punctuation">,</span> <span class="token string">".jpg"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//fileName -> pretty_girl</span></code></pre><p><code>URLUtil.url</code> : 通过一个字符串形式的URL地址创建URL对象</p><p><code>JoinPoint</code>：JoinPoint对象封装了SpringAop中切面方法的信息,在切面方法中添加JoinPoint参数,就可以<strong>获取到封装了该方法信息的JoinPoint对象</strong>。</p><p><strong>常用API</strong></p><table><thead><tr><th>方法名</th><th>功能</th></tr></thead><tbody><tr><td>Signature getSignature();</td><td>获取封装了署名信息的对象,在该对象中可以获取到目标方法名,所属类的Class等信息</td></tr><tr><td>Object[] getArgs();</td><td>获取传入目标方法的参数对象</td></tr><tr><td>Object getTarget();</td><td>获取被代理的对象</td></tr><tr><td>Object getThis();</td><td>获取代理对象</td></tr></tbody></table><p><code>ProceedingJoinPoint</code>：ProceedingJoinPoint对象是JoinPoint的子接口,该对象<strong>只用在@Around的切面方法</strong>中。添加了以下两个方法。</p><pre class=" language-java"><code class="language-java">Object <span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token comment" spellcheck="true">//执行目标方法 </span>Object <span class="token function">proceed</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token comment" spellcheck="true">//传入的新的参数去执行目标方法 </span></code></pre><h2 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h2><p><img src="https://gitee.com/codelnn/ImageHosting/raw/master/image/springboot_aop.png" alt></p><p>可以看到控制住台中会打印如下日志信息：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"result"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span>      <span class="token property">"totalPage"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>      <span class="token property">"pageSize"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      <span class="token property">"list"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"productCommentCount"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>          <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"万和"</span><span class="token punctuation">,</span>          <span class="token property">"bigPic"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>          <span class="token property">"logo"</span><span class="token operator">:</span> <span class="token string">"http://macro-oss.oss-cn-shenzhen.aliyuncs.com/mall/images/20180607/timg(5).jpg"</span><span class="token punctuation">,</span>          <span class="token property">"showStatus"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>          <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>          <span class="token property">"sort"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>          <span class="token property">"productCount"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>          <span class="token property">"firstLetter"</span><span class="token operator">:</span> <span class="token string">"W"</span><span class="token punctuation">,</span>          <span class="token property">"factoryStatus"</span><span class="token operator">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"productCommentCount"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>          <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"三星"</span><span class="token punctuation">,</span>          <span class="token property">"logo"</span><span class="token operator">:</span> <span class="token string">"http://macro-oss.oss-cn-shenzhen.aliyuncs.com/mall/images/20180607/timg (1).jpg"</span><span class="token punctuation">,</span>          <span class="token property">"showStatus"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>          <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>          <span class="token property">"sort"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>          <span class="token property">"productCount"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>          <span class="token property">"firstLetter"</span><span class="token operator">:</span> <span class="token string">"S"</span><span class="token punctuation">,</span>          <span class="token property">"factoryStatus"</span><span class="token operator">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"productCommentCount"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>          <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>          <span class="token property">"logo"</span><span class="token operator">:</span> <span class="token string">"http://macro-oss.oss-cn-shenzhen.aliyuncs.com/mall/images/20190129/17f2dd9756d9d333bee8e60ce8c03e4c_222_222.jpg"</span><span class="token punctuation">,</span>          <span class="token property">"showStatus"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>          <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>          <span class="token property">"sort"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>          <span class="token property">"productCount"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>          <span class="token property">"firstLetter"</span><span class="token operator">:</span> <span class="token string">"H"</span><span class="token punctuation">,</span>          <span class="token property">"factoryStatus"</span><span class="token operator">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"pageNum"</span><span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">"操作成功"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"basePath"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080"</span><span class="token punctuation">,</span>  <span class="token property">"method"</span><span class="token operator">:</span> <span class="token string">"GET"</span><span class="token punctuation">,</span>  <span class="token property">"ip"</span><span class="token operator">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span>  <span class="token property">"parameter"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"pageNum"</span><span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"pageSize"</span><span class="token operator">:</span> <span class="token number">3</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"分页查询品牌列表"</span><span class="token punctuation">,</span>  <span class="token property">"startTime"</span><span class="token operator">:</span> <span class="token number">1594026323466</span><span class="token punctuation">,</span>  <span class="token property">"uri"</span><span class="token operator">:</span> <span class="token string">"/brand/list"</span><span class="token punctuation">,</span>  <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/brand/list"</span><span class="token punctuation">,</span>  <span class="token property">"spendTime"</span><span class="token operator">:</span> <span class="token number">211</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aop切面 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>annotation</title>
      <link href="/2020/07/02/annotation/"/>
      <url>/2020/07/02/annotation/</url>
      
        <content type="html"><![CDATA[<h1 id="Java注解（Annotation）"><a href="#Java注解（Annotation）" class="headerlink" title="Java注解（Annotation）"></a>Java注解（Annotation）</h1><h2 id="什么是注解？"><a href="#什么是注解？" class="headerlink" title="什么是注解？"></a>什么是注解？</h2><p><em>Annotation</em>是<em>Java</em>5开始引入的新特征，中文名称叫<strong>注解</strong>。它用来将<strong>元数据</strong>（<em>metadata</em>）与程序元素（类、方法、成员变量等）进行关联。注解为我们在代码中<strong>添加信息提供了一种形式化的方法</strong>，使我们可以在稍后某个时刻非常方便地使用这些数据。</p><p><em>Java</em>注解是附加在代码中的一些元数据，用于一些工具编译、运行时进行解析<strong>通过反射</strong>和使用，起到说明、配置的功能。<strong>注解不能直接干扰程序代码的运行，无论增加或者删除注解，代码都能正常运行</strong>。</p><h2 id="注解的用处"><a href="#注解的用处" class="headerlink" title="注解的用处"></a>注解的用处</h2><ol><li>编写文档：通过代码里标识的元数据生成文档。常见有@<em>param</em> @<em>return</em>等。</li><li>代码分析：通过代码里面标识元数据对代码进行分析。</li><li>编译检查：通过代码里标识的元数据让编译器能实现基本的编译检查。</li></ol><h2 id="系统注解"><a href="#系统注解" class="headerlink" title="系统注解"></a>系统注解</h2><h3 id="标准注解"><a href="#标准注解" class="headerlink" title="标准注解"></a>标准注解</h3><p><em>Java</em>提供了5个基本的注解用法</p><ul><li><p>@<em>Override</em>：限定重写父类方法，它可以强制一个子类必须覆盖父类的方法。写在子类的方法上，在编译期，编译器检查这个方法，检查父类必须包含该方法，否则编译出错。<strong>该注解只能修饰方法，在编译期被读取</strong>。</p></li><li><p>@<em>Deprecated</em>：用于表示某个程序元素已过时或者可能运行时出现问题。<strong>编译时读取，编译器编译到过时元素会给出警告</strong>。</p></li><li><p>@<em>SuppressWarnings</em>：抑制编译警告。<strong>被该注解修饰的程序元素（以及该程序元素中的所有子元素）取消显式指定的编译警告</strong>。</p></li><li><p>@SafeVarargs：<em>Java</em>7新增，<strong>去除“堆污染”警告</strong>。<strong>堆污染</strong>——-把一个不带泛型的对象赋值给一个带泛型的变量时就会发生堆污染。</p><pre class=" language-java"><code class="language-java">List l2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Number<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> ls <span class="token operator">=</span> l2<span class="token punctuation">;</span> Arrays源代码<span class="token annotation punctuation">@SafeVarargs</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"varargs"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">asList</span><span class="token punctuation">(</span>T<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>@<em>FunctionInterface</em>：<em>Java</em>8新增，修饰函数式接口。<strong>使用该注解修饰的接口必须是函数式接口，不然编译会出错</strong>。<strong>函数式接口</strong>——如果接口中只有一个抽象方法（可以包含多个<em>default</em>方法或者<em>static</em>方法），就是函数式接口。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Functionlnterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FunInterface</span><span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"foo类方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bar默认方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只定义一个抽象方法，默认public</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><p>元注解：和元数据一样，修饰注解的注解。</p><ul><li><p>@Target（目标）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>ANNOTATION_TYPE<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Target</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Returns an array of the kinds of elements an annotation type     * can be applied to.     * @return an array of the kinds of elements an annotation type     * can be applied to     */</span>    ElementType<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>用于指定被修饰的注解能用于哪些程序元素上。它包含一个名为value的成员变量，取值如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> ElementType <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/** Class, interface (including annotation type), or enum declaration */</span>    TYPE<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Field declaration (includes enum constants) */</span>    FIELD<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Method declaration */</span>    METHOD<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Formal parameter declaration */</span>    PARAMETER<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Constructor declaration */</span>    CONSTRUCTOR<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Local variable declaration */</span>    LOCAL_VARIABLE<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Annotation type declaration */</span>    ANNOTATION_TYPE<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Package declaration */</span>    PACKAGE<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * Type parameter declaration     *     * @since 1.8     */</span>    TYPE_PARAMETER<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * Use of a type     *     * @since 1.8     */</span>    TYPE_USE<span class="token punctuation">}</span></code></pre></li><li><p>@Retention（保留）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>ANNOTATION_TYPE<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Retention</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Returns the retention policy.     * @return the retention policy     */</span>    RetentionPolicy <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>用于指定被修饰注解的生命周期。它包含一个value的成员变量，取值如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> RetentionPolicy <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Annotations are to be discarded by the compiler.     */</span>    SOURCE<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * Annotations are to be recorded in the class file by the compiler     * but need not be retained by the VM at run time.  This is the default     * behavior.     */</span>    CLASS<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * Annotations are to be recorded in the class file by the compiler and     * retained by the VM at run time, so they may be read reflectively.     *     * @see java.lang.reflect.AnnotatedElement     */</span>    RUNTIME<span class="token punctuation">}</span></code></pre><table><thead><tr><th>SOURCE</th><th>在编译阶段被丢弃。这些注解在编译结束之后就不再有任何意义，所以它们不会写入字节码文件。@Override、@SuppressWarnings都属于这类注解。</th></tr></thead><tbody><tr><td>CLASS</td><td>在类加载的时候丢弃。在字节码文件的处理中有用。注解默认使用这种方式。</td></tr><tr><td>RUNTIME</td><td>始终不会丢弃，运行期也保留该注解，因此可以使用反射机制读取该注解信息。</td></tr></tbody></table></li><li><p>@Documented</p><p>用于指定被修饰的注解将被Javadoc工具取成文档，即说明该注解将被包含在Javadoc中。</p></li><li><p>@Inherited</p><p>用于指定被修饰的注解具有继承性。即子类可以继承父类中的该注解。</p></li></ul><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><p> 使用关键字@interface</p><p> <strong>注解元素数据类型</strong></p><ol><li>所有基本类型（int、float、boolean等）</li><li>String</li><li>Class</li><li>enum</li><li>Annotation</li><li>以上类型的数组</li></ol><h3 id="一个简单的注解"><a href="#一个简单的注解" class="headerlink" title="一个简单的注解"></a>一个简单的注解</h3><pre class=" language-java"><code class="language-java">@<span class="token keyword">interface</span> <span class="token class-name">test</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>默认情况下，注解可以修饰任何程序元素（类、方法、接口、属性）等。</p><h3 id="带成员变量的注解"><a href="#带成员变量的注解" class="headerlink" title="带成员变量的注解"></a>带成员变量的注解</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">DBTable</span> <span class="token punctuation">{</span>     String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@DBTable</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"student"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p><strong>以无形参的方法形式来声明注解的成员变量</strong>。使用default关键字设置初始值，没设置初始值的变量则使用时<code>必须</code>提供，有初始值的变量可以设置也可以不设置。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ul><li>没有成员变量的注解 —-标记注解（marker annotation）<strong>这种注解仅利用自身的存在与否来提供信息</strong>。</li><li>有成员变量的注解—-单值注解、完整注解 <strong>这种注解提供更多元数据</strong>。</li></ul><h2 id="获取注解信息"><a href="#获取注解信息" class="headerlink" title="获取注解信息"></a>获取注解信息</h2><p><strong>思路：通过反射获取注解，将注解转换成具体的注解类，在调用注解类定义的方法获取元数据信息。</strong></p><p>java.lang.reflect.AnnotatedElement接口 代表程序中可以接受注解的程序元素。常见实现类：</p><ul><li>Class：类定义</li><li>Constructor：构造器定义</li><li>Field：类的成员属性定义</li><li>Method：类的方法定义</li><li>Package：类的包定义</li></ul><p>AnnotatedElement接口获取注解信息的方法如下：</p><ul><li><ul><li><table><thead><tr><th>Modifier and Type</th><th>Method and Description</th></tr></thead><tbody><tr><td><code>&lt;T extends Annotation&gt;T</code></td><td><code>getAnnotation(Class&lt;T&gt; annotationClass)</code>  返回该元素的，如果这样的注释 <em>，</em>否则返回null指定类型的注释。</td></tr><tr><td><code>Annotation[]</code></td><td><code>getAnnotations()</code>  返回此元素上 <em>存在的</em>注释。</td></tr><tr><td><code>default &lt;T extends Annotation&gt;T[]</code></td><td><code>getAnnotationsByType(Class&lt;T&gt; annotationClass)</code>  返回与此元素相关 <em>联的注释</em> 。</td></tr><tr><td><code>default &lt;T extends Annotation&gt;T</code></td><td><code>getDeclaredAnnotation(Class&lt;T&gt; annotationClass)</code>  如果这样的注释 <em>直接存在</em> ，则返回指定类型的元素注释，否则返回null。</td></tr><tr><td><code>Annotation[]</code></td><td><code>getDeclaredAnnotations()</code>  返回 <em>直接存在</em>于此元素上的注释。</td></tr><tr><td><code>default &lt;T extends Annotation&gt;T[]</code></td><td><code>getDeclaredAnnotationsByType(Class&lt;T&gt; annotationClass)</code>  如果此类注释 <em>直接存在</em>或 <em>间接存在，</em>则返回该元素的注释（指定类型）。</td></tr><tr><td><code>default boolean</code></td><td><code>isAnnotationPresent(Class&lt;?  extends Annotation&gt; annotationClass)</code>  如果此元素上 <em>存在</em>指定类型的注释，则返回true，否则返回false。</td></tr></tbody></table></li></ul></li></ul><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p><strong>注解处理器</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">DBField</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">clazz</span> <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Field field <span class="token operator">:</span> fields<span class="token punctuation">)</span><span class="token punctuation">{</span>           DBField dbField <span class="token operator">=</span>  field<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>DBField<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id = "</span><span class="token operator">+</span>dbField<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span><span class="token string">"value = "</span><span class="token operator">+</span>dbField<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>打算在springboot中使用注解来实现一些功能</p>]]></content>
      
      
      <categories>
          
          <category> Java语言基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
