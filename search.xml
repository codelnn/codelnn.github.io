<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>nginx</title>
      <link href="/2020/07/11/nginx/"/>
      <url>/2020/07/11/nginx/</url>
      
        <content type="html"><![CDATA[<h1 id="nginx简介"><a href="#nginx简介" class="headerlink" title="nginx简介"></a>nginx简介</h1><h2 id="1-1概述"><a href="#1-1概述" class="headerlink" title="1.1概述"></a>1.1概述</h2><blockquote><p>什么是nginx？</p></blockquote><p>nginx(<code>engine x</code>)是一款高性能的<strong>http 服务器</strong>/<strong>反向代理</strong>web服务器及电子邮件（IMAP/POP3）代理服务器。由俄罗斯的程序设计师Igor Sysoev所开发，官方测试nginx能够支支撑5万并发链接，并且cpu、内存等资源消耗却非常低，运行非常稳定。而tomcat支持5百并发。</p><blockquote><p>能干什么？</p></blockquote><ul><li>反向代理</li><li>负载均衡</li><li>动静分离</li><li>高可用</li></ul><h2 id="1-2安装"><a href="#1-2安装" class="headerlink" title="1.2安装"></a>1.2安装</h2><ol><li><pre class=" language-bash"><code class="language-bash">docker pull nginx <span class="token comment" spellcheck="true"># docker中拉取镜像</span></code></pre></li><li><pre class=" language-bash"><code class="language-bash">docker run -d -p 80:80 --name nginx docker.io/nginx   <span class="token comment" spellcheck="true">#运行 80是容器外端口 后面80是容器内部端口</span></code></pre></li><li><pre class=" language-bash"><code class="language-bash">docker <span class="token function">exec</span> -it nginx <span class="token function">bash</span>  <span class="token comment" spellcheck="true">#进入容器内部</span></code></pre></li><li><pre class=" language-bash"><code class="language-bash">docker <span class="token function">cp</span> 容器id:/etc/nginx/nginx.conf  /usr/data/nginx/conf/  <span class="token comment" spellcheck="true"># 复制配置文件到宿主机 （前提创建好要复制到的文件夹）</span></code></pre></li><li><pre class=" language-bash"><code class="language-bash">docker <span class="token function">cp</span> 容器id:/etc/nginx/conf.d/default.conf  /usr/data/nginx/conf.d/ <span class="token comment" spellcheck="true">#同上</span></code></pre></li><li><pre class=" language-bash"><code class="language-bash">docker stop nginx <span class="token comment" spellcheck="true">#停止运行容器</span></code></pre></li><li><pre class=" language-bash"><code class="language-bash">docker <span class="token function">rm</span> nginx <span class="token comment" spellcheck="true">#删除容器</span></code></pre></li><li><pre class=" language-bash"><code class="language-bash">docker run -p 80:80 --name nginx --privileged<span class="token operator">=</span>true -v /usr/data/nginx/html:/usr/share/nginx/html -v /usr/data/nginx/logs:/var/log/nginx -v /usr/data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v /usr/data/nginx/conf.d:/etc/nginx/conf.d -d docker.io/nginx<span class="token comment" spellcheck="true">#启动容器 并挂载文件</span></code></pre></li></ol><blockquote><p>说明：</p><p>-v 是将’:’后面的容器内的文件挂载到宿主机上，也就是说用宿主机的配置来代替容器内的配置，更改宿主机的配置相当于是改容器内的配置，这样的话假如容器被删除了，也不会丢失我们的配置文件。</p></blockquote><p><strong>一些常用命令</strong></p><pre class=" language-bash"><code class="language-bash">docker <span class="token function">exec</span> -it 容器name <span class="token function">bash</span>退出容器<span class="token comment" spellcheck="true">#############容器内部命令</span><span class="token keyword">exit</span>ctrl+P+Q<span class="token function">cat</span> 可以查看文件查看nginx的版本号./nginx -v关闭nginx./nginx -s stop启动nginx./nginx重新加载nginx./nginx -s reload<span class="token comment" spellcheck="true">###################容器外命令</span>查看进程<span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span> nginx</code></pre><h2 id="1-3解析配置文件"><a href="#1-3解析配置文件" class="headerlink" title="1.3解析配置文件"></a>1.3解析配置文件</h2><blockquote><ul><li>1、<strong>全局块</strong>：配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。</li><li>2、<strong>events块</strong>：配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。</li><li>3、<strong>http块</strong>：可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。</li><li>4、<strong>server块</strong>：配置虚拟主机的相关参数，一个http中可以有多个server。</li><li>5、<strong>location块</strong>：配置请求的路由，以及各种页面的处理情况。</li></ul></blockquote><p><code>nginx.conf</code></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">##################全局块#################</span><span class="token comment" spellcheck="true">#定义nginx运行的用户或用户组</span>user  nginx<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#nginx进程数，建议设置为等于CPU总核数 越大，可以支持的并发数量就越多。</span>worker_processes  1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#全局错误日志定义  类型 [debug | info | notice | warn | error | crit]</span>error_log  /var/log/nginx/error.log warn<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 进程pid文件 位置</span>pid        /var/run/nginx.pid<span class="token punctuation">;</span><span class="token comment" spellcheck="true">########################events块##########</span>events <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">#单进程支持的最大连接数目</span>    worker_connections  1024<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">###############http块###############</span>http <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">#文件扩展名与文件类型映射表</span>    include       /etc/nginx/mime.types<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">#默认文件类型</span>    default_type  application/octet-stream<span class="token punctuation">;</span>    log_format  main  <span class="token string">'<span class="token variable">$remote_addr</span> - <span class="token variable">$remote_user</span> [<span class="token variable">$time_local</span>] "<span class="token variable">$request</span>" '</span>                      <span class="token string">'<span class="token variable">$status</span> <span class="token variable">$body_bytes_sent</span> "<span class="token variable">$http_referer</span>" '</span>                      <span class="token string">'"<span class="token variable">$http_user_agent</span>" "<span class="token variable">$http_x_forwarded_for</span>"'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">#定义本虚拟主机的访问日志</span>    access_log  /var/log/nginx/access.log  main<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">#开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如 </span>    <span class="token comment" spellcheck="true">#果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：</span>    <span class="token comment" spellcheck="true">#如果图片显示不正常把这个改成off。</span>    sendfile        on<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">#此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用</span>    <span class="token comment" spellcheck="true">#tcp_nopush     on;</span>    <span class="token comment" spellcheck="true">#连接超时时间 单位秒</span>    keepalive_timeout  65<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">#是否开启gzip压缩输出</span>    <span class="token comment" spellcheck="true">#gzip  on;</span>    <span class="token comment" spellcheck="true">#gzip_disable "msie6"; #IE6不使用gzip</span>    <span class="token comment" spellcheck="true">#gzip_vary on; #设置为on会在Header里增加 "Vary: Accept-Encoding"</span>    <span class="token comment" spellcheck="true">#gzip_proxied any; #代理结果数据的压缩</span>    <span class="token comment" spellcheck="true">#gzip_comp_level 6; #gzip压缩比（1~9），越小压缩效果越差，但是越大处理越慢，所以一般取中间值</span>    <span class="token comment" spellcheck="true">#gzip_buffers 16 8k; #获取多少内存用于缓存压缩结果</span>    <span class="token comment" spellcheck="true">#gzip_http_version 1.1; #识别http协议的版本</span>    <span class="token comment" spellcheck="true">#gzip_min_length 1k; #设置允许压缩的页面最小字节数，超过1k的文件会被压缩</span>    <span class="token comment" spellcheck="true">#gzip_types application/javascript text/css; #对特定的MIME类型生效,js和css文件会被压缩</span>    <span class="token comment" spellcheck="true">#加载配置文件default.conf</span>    include /etc/nginx/conf.d/*.conf<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>default.conf</code></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#################server块#############</span>server <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">#监听的是容器内部的端口</span>    listen       80<span class="token punctuation">;</span>    listen  <span class="token punctuation">[</span>::<span class="token punctuation">]</span>:80<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">#域名 可以设置多个，需空格隔开</span>    server_name  localhost<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">#charset koi8-r;</span>    <span class="token comment" spellcheck="true">#access_log  /var/log/nginx/host.access.log  main;</span>    <span class="token comment" spellcheck="true">##########################location块##################</span>    <span class="token comment" spellcheck="true">#对 “/” 启用反向代理</span>    location / <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true"># '/' 相当于容器/usr/share/nginx/html目录下，</span>        <span class="token comment" spellcheck="true">#一般会把这个目录挂载到容器外，如上面/usr/data/nginx/html ,</span>        <span class="token comment" spellcheck="true">#所以只需要把html页面放入这个目录，就可以通过 域名:端口/文件名  进行访问啦啦 </span>        root   /usr/share/nginx/html<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">#默认的首页文件， 多个用空格分开</span>        index  index.html index.htm<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">#error_page  404              /404.html;</span>    <span class="token comment" spellcheck="true"># redirect server error pages to the static page /50x.html</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true">#出错对应的http状态码时，用50x.html页面回应用户。</span>    error_page   500 502 503 504  /50x.html<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">#访问50x.html</span>    location <span class="token operator">=</span> /50x.html <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true"># 去这个目录下找50x.html页面</span>        root   /usr/share/nginx/html<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true">#location ~ \.php$ {</span>    <span class="token comment" spellcheck="true">#    proxy_pass   http://127.0.0.1;</span>    <span class="token comment" spellcheck="true">#}</span>    <span class="token comment" spellcheck="true"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true">#location ~ \.php$ {</span>    <span class="token comment" spellcheck="true">#    root           html;</span>    <span class="token comment" spellcheck="true">#    fastcgi_pass   127.0.0.1:9000;</span>    <span class="token comment" spellcheck="true">#    fastcgi_index  index.php;</span>    <span class="token comment" spellcheck="true">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span>    <span class="token comment" spellcheck="true">#    include        fastcgi_params;</span>    <span class="token comment" spellcheck="true">#}</span>    <span class="token comment" spellcheck="true"># deny access to .htaccess files, if Apache's document root</span>    <span class="token comment" spellcheck="true"># concurs with nginx's one</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true">#location ~ /\.ht {</span>    <span class="token comment" spellcheck="true">#    deny  all;</span>    <span class="token comment" spellcheck="true">#}</span><span class="token punctuation">}</span></code></pre><blockquote><p>location</p></blockquote><p><strong>配置格式</strong></p><pre class=" language-bash"><code class="language-bash">location <span class="token punctuation">[</span> 空格 <span class="token operator">|</span> <span class="token operator">=</span> <span class="token operator">|</span> ~ <span class="token operator">|</span> ~* <span class="token operator">|</span>^~<span class="token operator">|</span><span class="token operator">!</span>~ <span class="token operator">|</span> <span class="token operator">!</span>~* <span class="token punctuation">]</span> /uri/ <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><ul><li>= 开头:表示精确匹配</li><li>~ 开头:表示区分大小写的正则匹配</li><li>~* 开头:表示不区分大小写的正则匹配</li><li>^~ 开头:注意这不是一个正则表达式,它的目的是优于正则表达式的匹配；如果该location是最佳匹配，则不再进行正则表达式检测。</li><li>!~ &amp;&amp; !~*：表示区分大小写不匹配的正则和不区分大小写的不匹配的正则</li><li><strong>/uri/</strong>:普通字符串匹配</li><li><strong>/</strong> 绝对路径根目录匹配, 如果没有其它匹配,任何请求都会匹配到</li></ul><p><code>匹配搜索优先级</code></p><pre><code>(location =) &gt; (location 完整路径) &gt; (location ^~ 路径) &gt; (location ~,~* 正则顺序) &gt; (location 部分起始路径) &gt; (/)</code></pre><p><code>有无&#39;/&#39;</code></p><pre class=" language-bash"><code class="language-bash">1、没有/location /abc/def 可用匹配/abc/defgh请求，也可以匹配/abc/def/gh请求2、有/location /abc/def/ 只能匹配/abc/def/anything请求</code></pre><p><code>举例说明</code></p><pre class=" language-bash"><code class="language-bash">location <span class="token operator">=</span> / <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">#规则A</span><span class="token punctuation">}</span>location <span class="token operator">=</span> /login <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">#规则B</span><span class="token punctuation">}</span>location ^~ /static/ <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">#规则C</span><span class="token punctuation">}</span>location ~ \.<span class="token punctuation">(</span>gif<span class="token operator">|</span>jpg<span class="token operator">|</span>png<span class="token operator">|</span>js<span class="token operator">|</span>css<span class="token punctuation">)</span>$ <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">#规则D，注意：是根据括号内的大小写进行匹配。括号内全是小写，只匹配小写</span><span class="token punctuation">}</span>location ~* \.<span class="token punctuation">(</span>gif<span class="token operator">|</span>jpg<span class="token operator">|</span>png<span class="token operator">|</span>js<span class="token operator">|</span>css<span class="token punctuation">)</span>$ <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">#规则E</span><span class="token punctuation">}</span>location <span class="token operator">!</span>~ \.xhtml$ <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">#规则F</span><span class="token punctuation">}</span>location <span class="token operator">!</span>~* \.xhtml$ <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">#规则G</span><span class="token punctuation">}</span>location / <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">#规则H</span><span class="token punctuation">}</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">###################################前提监听端口为80</span>访问根目录/， 比如http://localhost/ 将匹配规则A访问 http://localhost/login 将匹配规则B，http://localhost/register 则匹配规则H访问 http://localhost/static/a.html 将匹配规则C访问 http://localhost/a.gif, http://localhost/b.jpg 将匹配规则D和规则E，但是规则D顺序优先，规则E不起作用， 而 http://localhost/static/c.png 则优先匹配到 规则C访问 http://localhost/a.PNG 则匹配规则E， 而不会匹配规则D，因为规则E不区分大小写。访问 http://localhost/a.xhtml 不会匹配规则F和规则G，http://localhost/a.XHTML不会匹配规则G，（因为<span class="token operator">!</span>）。规则F，规则G属于排除法，符合匹配规则也不会匹配到，所以想想看实际应用中哪里会用到。访问 http://localhost/category/id/1111 则最终匹配到规则H，因为以上规则都不匹配，这个时候nginx转发请求给后端应用服务器，比如FastCGI（php），tomcat（jsp），nginx作为方向代理服务器存在。</code></pre><blockquote><p> proxy_pass的几种情况</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#下面情况都由http://192.168.0.105/uri/test.html进行访问</span>location /uri/<span class="token punctuation">{</span>   proxy_pass http://127.0.0.1:8080/<span class="token punctuation">;</span><span class="token punctuation">}</span>代理到URL：http://127.0.0.1:8080/test.html少个<span class="token string">'/'</span>location /uri/<span class="token punctuation">{</span>   proxy_pass http://127.0.0.1:8080<span class="token punctuation">;</span><span class="token punctuation">}</span>代理到URL：http://127.0.0.1:8080/uri/test.htmllocation /uri/<span class="token punctuation">{</span>   proxy_pass http://127.0.0.1:8080/html/<span class="token punctuation">;</span><span class="token punctuation">}</span>代理到URL：http://127.0.0.1:8080/html/test.html少个<span class="token string">'/'</span>location /uri/<span class="token punctuation">{</span>   proxy_pass http://127.0.0.1:8080/html<span class="token punctuation">;</span><span class="token punctuation">}</span>代理到URL：http://127.0.0.1:8080/htmltest.html</code></pre><h2 id="1-4反向代理"><a href="#1-4反向代理" class="headerlink" title="1.4反向代理"></a>1.4反向代理</h2><p>暴露的是代理服务器地址，隐藏了真实服务器 IP 地址。</p><img src="https://gitee.com/codelnn/ImageHosting/raw/master/image/nginx反向代理.png" style="zoom:80%;"><blockquote><p>此情况仅限tomcat也在同一docker容器中运行 </p><p>由于tomcat是在docker中运行的，因此这个proxy_pass 这个IP不能写成localhost和127.0.0.1，需写成这个容器在docker中的IP或者docker的IP。但如果tomcat直接在linux系统运行，则可以写localhost。（有点玄学，有时候docker的IP可以成功，但有些时候只能容器在docker的IP才能成功   —-好像关闭虚拟机防火墙就使用docker的IP了）</p></blockquote><p><strong>查看容器在docker中的IP</strong></p><img src="https://gitee.com/codelnn/ImageHosting/raw/master/image/nginxIP.png" style="zoom:80%;"><p><strong>查看docker容器的IP</strong></p><img src="https://gitee.com/codelnn/ImageHosting/raw/master/image/nginxip_docker.png" style="zoom:80%;"><blockquote><p> 反向代理  通过<a href="http://www.zzf.com可以访问到tomcat的首页" target="_blank" rel="noopener">www.zzf.com可以访问到tomcat的首页</a></p></blockquote><img src="https://gitee.com/codelnn/ImageHosting/raw/master/image/nginx反向代理4.png" style="zoom: 67%;"><blockquote><p>注意：如果把静态资源放在root下面，需要进入nginx.conf里面把user改成root。这种情况需要把容器内的/images目录进行挂载到宿主机的root目录下的images文件。</p></blockquote><img src="https://gitee.com/codelnn/ImageHosting/raw/master/image/nginx图片路径设置.png" style="zoom: 67%;"><h2 id="1-5负载均衡"><a href="#1-5负载均衡" class="headerlink" title="1.5负载均衡"></a>1.5负载均衡</h2><p>增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，也就是我们所说的负载均衡。</p><p><img src="https://gitee.com/codelnn/ImageHosting/raw/master/image/nginxfzjh.png" alt></p><p><code>例子：在http模块中加入</code></p><pre class=" language-bash"><code class="language-bash">upstream myserver<span class="token punctuation">{</span>   server 172.17.0.1:8080<span class="token punctuation">;</span>   server 172.17.0.1:8081<span class="token punctuation">;</span><span class="token punctuation">}</span>location /<span class="token punctuation">{</span>   proxy_pass http://myserver<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>分配策略</code></p><p>1、轮询（默认)每一个请求按时间顺序逐一分配到不同的后台服务器，如果后台服务器down掉，能自动删除。</p><p>2、weight：代表权重，默认为1，权重越高被分配的客户端越多。</p><pre class=" language-bash"><code class="language-bash">upstream myserver<span class="token punctuation">{</span>   server 172.17.0.1:8080 weight<span class="token operator">=</span>4<span class="token punctuation">;</span>   server 172.17.0.1:8081 weight<span class="token operator">=</span>6<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>3、ip_hash:每个请求按访问ip的hash结果分配，这样每个访客访问一个后台服务器；可以解决session的问题</p><pre class=" language-bash"><code class="language-bash">upstream myserver<span class="token punctuation">{</span>   ip_hash<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#保证每个访客固定访问一个后端服务器</span>   server 172.17.0.1:8080<span class="token punctuation">;</span>   server 172.17.0.1:8081<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>4、least_conn:在一些要求需要更长的时间才能完成的应用情况下， 最少连接可以更公平地控制应用程序实例的负载。使用最少连接负载均衡，nginx不会向负载繁忙的服务器上分发请求，而是将请求分发到负载低的服务器上。</p><pre class=" language-bash"><code class="language-bash">upstream myserver<span class="token punctuation">{</span>   least_conn<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">#把请求转发给连接数较少的后端服务器</span>   server 172.17.0.1:8080<span class="token punctuation">;</span>   server 172.17.0.1:8081<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>5、fair(第三方):根据响应时间来分配，响应时间越短越先分配。</p><pre class=" language-bash"><code class="language-bash">upstream myserver<span class="token punctuation">{</span>   server 172.17.0.1:8080<span class="token punctuation">;</span>   server 172.17.0.1:8081<span class="token punctuation">;</span>   fair<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#实现响应时间短的优先分配</span><span class="token punctuation">}</span></code></pre><p>6、url_hash(第三方)：按访问url的hash结果来分配请求，使每一个url定向到同一个后端服务器，要配合缓存命中来使用。</p><pre class=" language-bash"><code class="language-bash">upstream myserver<span class="token punctuation">{</span>   <span class="token function">hash</span> <span class="token variable">$request_uri</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">#实现每个url定向到同一个后端服务器</span>   server 172.17.0.1:8080<span class="token punctuation">;</span>   server 172.17.0.1:8081<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="1-6动静分离"><a href="#1-6动静分离" class="headerlink" title="1.6动静分离"></a>1.6动静分离</h2><p>为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度。降低原来单个服务器的压力。</p><img src="https://gitee.com/codelnn/ImageHosting/raw/master/image/nginx动静分离.png" style="zoom:80%;"><blockquote><p>两种方法:</p><p>一种是纯粹把静态文件独立成单独的域名，放在独立的服务器上，也是目前主流推崇的方案；</p><p>另外一种方法就是动态跟静态文件混合在一起发布，通过 nginx 来分开。通过 location指定不同的后缀名实现不同的请求转发。通过 expires 参数设置，可以使浏览器缓存过期时间，减少与服务器之间的请求和流量。</p></blockquote><h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3><ul><li><p>修改本机的host文件</p><pre class=" language-bash"><code class="language-bash">192.168.0.105 img.codelnn.com192.168.0.105 www.zzf.com</code></pre></li><li><p>然后将我们的图片上传到宿主机挂载nginx的html目录中</p><p><img src="https://gitee.com/codelnn/ImageHosting/raw/master/image/nginx%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB2.png" alt></p></li><li><p>在<code>/usr/data/nginx/conf.d</code>文件夹中添加配置文件img.conf对图片进行反向代理</p><pre class=" language-bash"><code class="language-bash">server <span class="token punctuation">{</span>    listen       80<span class="token punctuation">;</span>    server_name  img.codelnn.com<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#修改域名</span>    location /img/ <span class="token punctuation">{</span>        root   /usr/share/nginx/html<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#代理到html文件夹中</span>        index  index.html index.htm<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    error_page   500 502 503 504  /50x.html<span class="token punctuation">;</span>    location <span class="token operator">=</span> /50x.html <span class="token punctuation">{</span>        root   /usr/share/nginx/html<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>​    在<code>/usr/data/nginx/conf.d</code>文件夹中添加配置文件tomcat.conf对图片进行反向代理</p><pre class=" language-bash"><code class="language-bash">server <span class="token punctuation">{</span>    listen       80<span class="token punctuation">;</span>    server_name  www.zzf.com<span class="token punctuation">;</span>    location / <span class="token punctuation">{</span>        proxy_pass   http://172.17.0.2:8080<span class="token punctuation">;</span>        index  index.html index.htm<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    error_page   500 502 503 504  /50x.html<span class="token punctuation">;</span>    location <span class="token operator">=</span> /50x.html <span class="token punctuation">{</span>        root   /usr/share/nginx/html<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><pre class=" language-bash"><code class="language-bash">server <span class="token punctuation">{</span>    listen       80<span class="token punctuation">;</span>    server_name  www.zzf.com<span class="token punctuation">;</span>    location / <span class="token punctuation">{</span>        root   /usr/share/nginx/html<span class="token punctuation">;</span>        index  index.html<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 所有静态请求都由nginx处理，存放目录为html  </span>  location ~ .<span class="token punctuation">(</span>gif<span class="token operator">|</span>jpg<span class="token operator">|</span>jpeg<span class="token operator">|</span>png<span class="token operator">|</span>bmp<span class="token operator">|</span>swf<span class="token operator">|</span>css<span class="token operator">|</span>js<span class="token punctuation">)</span>$ <span class="token punctuation">{</span>        root    /usr/share/nginx/html<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 所有动态请求都转发给tomcat处理  </span>  location ~ .<span class="token punctuation">(</span>jsp<span class="token operator">|</span>do<span class="token punctuation">)</span>$ <span class="token punctuation">{</span>        proxy_pass  http://172.17.0.2:8080<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    error_page   500 502 503 504  /50x.html<span class="token punctuation">;</span>    location <span class="token operator">=</span> /50x.html <span class="token punctuation">{</span>        root   e:wwwroot<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  </code></pre><h2 id="1-7高可用"><a href="#1-7高可用" class="headerlink" title="1.7高可用"></a>1.7高可用</h2><p>在Keepalived + Nginx高可用负载均衡架构中，keepalived负责实现High-availability (HA) 功能控制前端机VIP（虚拟网络地址），当有设备发生故障时，热备服务器可以瞬间将VIP自动切换过来，实际运行中体验只有2秒钟切换时间，DNS服务可以负责前端VIP的负载均衡。nginx负责后端web服务器的负载均衡，将客户端的请求按照一定的算法转发给后端处理，后端将响应直接返回给客户端。</p><img src="https://gitee.com/codelnn/ImageHosting/raw/master/image/nginxgky1.png" style="zoom: 33%;"><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>MASTER、BACKUP两台服务器均通过keepalived软件把ens33网卡绑上一个虚拟IP（VIP）地址192.168.32.88，此VIP当前由谁承载着服务就绑定在谁的ens33上，当MASTER发生故障时，BACKUP会通过/etc/keepalived/keepalived.conf文件中设置的心跳时间advert_int 1检查，无法获取MASTER正常状态的话，BACKUP会瞬间绑定VIP来接替MASTER的工作，当MASTER恢复后keepalived会通过priority（权重参数：值越大优先使用）参数判断优先权将虚拟VIP地址192.168.32.88重新绑定给MASTER的ens33网卡。</p><h3 id="安装keepalived"><a href="#安装keepalived" class="headerlink" title="安装keepalived"></a>安装keepalived</h3><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> keepalived -y</code></pre><p><code>主机</code></p><p>编辑配置文件keepalived.conf      <strong>文件路径：<code>/etc/keepalived/keepalived.conf</code></strong></p><pre class=" language-bash"><code class="language-bash"><span class="token operator">!</span>Configuration File <span class="token keyword">for</span> keepalivedglobal_defs <span class="token punctuation">{</span>   notification_email <span class="token punctuation">{</span>   acassen@firewall.loc   failover@firewall.loc   sysadmin@firewall.loc <span class="token punctuation">}</span>   notification_email_from Alexandre.Cassen@firewall.loc        <span class="token comment" spellcheck="true">#定义利用什么邮箱发送邮件</span>   smtp_server smtp.163.com     <span class="token comment" spellcheck="true">#定义邮件服务器信息</span>   smtp_connect_timeout 30      <span class="token comment" spellcheck="true">#定义邮件发送超时时间</span>   router_id 192.168.0.105      <span class="token comment" spellcheck="true">#（重点参数）局域网keppalived主机身份标识信息(每台唯一)</span>   script_user root             <span class="token comment" spellcheck="true">#添加运行健康检查脚本的用户</span>   enable_script_security       <span class="token comment" spellcheck="true">#添加运行健康检查脚本的组</span><span class="token punctuation">}</span>vrrp_script chk_http_port <span class="token punctuation">{</span> script <span class="token string">"/etc/keepalived/nginx_check.sh"</span>         <span class="token comment" spellcheck="true">#表示将一个脚本信息赋值给变量</span> interval 2      <span class="token comment" spellcheck="true">#检测脚本执行的间隔</span> weight -20      <span class="token comment" spellcheck="true">#监测失败，则相应的vrrp_instance的优先级会减少20个点</span><span class="token punctuation">}</span>vrrp_instance VI_1 <span class="token punctuation">{</span> state MASTER           <span class="token comment" spellcheck="true">#keepalived角色描述信息，备份服务器上将 MASTER 改为 BACKUP</span> interface ens33        <span class="token comment" spellcheck="true">#将虚拟ip用于那块网卡</span> virtual_router_id 51   <span class="token comment" spellcheck="true">#主、备机的 virtual_router_id 必须相同</span> priority 100            <span class="token comment" spellcheck="true">#主、备机取不同的优先级，主机值较大，备份机值较小</span> advert_int 1           <span class="token comment" spellcheck="true">#主服务器组播包发送间隔时间</span>authentication <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true"># 主备主机之间的认证表示信息</span>   auth_type PASS       <span class="token comment" spellcheck="true">#采用明文认证机制</span>   auth_pass 1111       <span class="token comment" spellcheck="true">#编写明文密码</span> <span class="token punctuation">}</span> virtual_ipaddress <span class="token punctuation">{</span>   192.168.0.110      <span class="token comment" spellcheck="true">#设置虚拟ip地址信息，此参数备节点设置和主节点相同</span> <span class="token punctuation">}</span> track_script <span class="token punctuation">{</span>    chk_http_port       <span class="token comment" spellcheck="true">#调用执行脚本</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>添加检查nginx的脚步nginx_check.sh   <strong>文件路径:</strong><code>/etc/keepalived/nginx_check.sh</code></p><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true"># 传入容器名称</span>containerName<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>nginx<span class="token variable">`</span></span>currTime<span class="token operator">=</span>`date +<span class="token string">"%Y-%m-%d %H:%M:%S"</span>`<span class="token comment" spellcheck="true"># 查看进程是否存在</span>exist<span class="token operator">=</span>`docker inspect --format <span class="token string">'{{.State.Running}}'</span> <span class="token variable">${containerName}</span>`<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">${exist}</span>"</span> <span class="token operator">!=</span> <span class="token string">"true"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>     systemctl stop keepalived.service   <span class="token comment" spellcheck="true">#杀死所有keepalived服务进程</span>     <span class="token comment" spellcheck="true"># 记录</span>     <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">${currTime}</span> docker容器宕机，容器名称：<span class="token variable">${containerName}</span>"</span> <span class="token operator">>></span>  /etc/dockerlog/docker_monitor.log<span class="token keyword">fi</span></code></pre><p>注意：一定要给这个脚本文件可执行权限（看到变成可执行的颜色），执行命令：<code>chmod u+x /etc/keepalived/nginx_check.sh</code></p><p><code>备用机</code></p><p>需要修改的地方</p><pre class=" language-bash"><code class="language-bash"> router_id 192.168.0.105  <span class="token comment" spellcheck="true">#ip地址</span> state MASTER             <span class="token comment" spellcheck="true">#keepalived角色描述信息，备份服务器上将 MASTER 改为 BACKUP</span> containerName<span class="token operator">=</span>nginx      <span class="token comment" spellcheck="true">#容器名字不要相同</span></code></pre><p><strong>启动服务</strong></p><pre class=" language-shell"><code class="language-shell">systemctl start keepalived.service </code></pre><p><strong>注意：</strong></p><p>虚拟ip网段要和real server 真实ip的网络地址一致,比如 192.168.0.105,那么虚拟ip必须是 192.168.0.* ,否则虚拟ip无法访问</p><p>关闭master中的keepalived ，backup的虚拟ip才会进行绑定。</p><img src="https://gitee.com/codelnn/ImageHosting/raw/master/image/nginxgky2.png" style="zoom:80%;"><h2 id="1-8nginx原理"><a href="#1-8nginx原理" class="headerlink" title="1.8nginx原理"></a>1.8nginx原理</h2><img src="https://gitee.com/codelnn/ImageHosting/raw/master/image/nginx原理.png" style="zoom:67%;"><img src="https://gitee.com/codelnn/ImageHosting/raw/master/image/nginx原理2.png" style="zoom:80%;"><p><code>处理流程</code></p><pre class=" language-markdown"><code class="language-markdown">1.首先，master 进程接受到信号（如nginx -s reload）后启动，读取配置文件，建好需要listen的socket后，然后再fork出多个woker进程，这样每个work进程都可以去accept这个socket2.当一个client连接到来时，所有accept的work进程都会受到通知，但只有一个进程可以accept成功，其它的则会accept失败，Nginx提供了一把共享锁accept_mutex来保证同一时刻只有一个work进程在accept连接，从而解决惊群问题3.当一个worker进程accept这个连接后，就开始读取请求，解析请求，处理请求，产生数据后，再返回给客户端，最后才断开连接，这样一个完成的请求就结束了4.一个worker进程可以同时处理多个请求，每个worker进程只有一个主线程，而是采用异步非阻塞的方式来处理并发请求。比如同时有多个http request的时候，worker主线程与第一条request建议连接将其处理转发给下游fast cgi后，并不会挂起等待，而是立马处理下一条，可以理解轮询处理。与多线程相比，这种事件处理方式是有很大的优势的，不需要创建线程，每个请求占用的内存也很少，没有上下文切换，事件处理非常的轻量级。并发数再多也不会导致无谓的资源浪费（上下文切换），更多的并发数，只是会占用更多的内存而已。因此nginx 是非常适合处理高并发请求的。</code></pre><blockquote><p>惊群现象：惊群效应就是当一个fd的事件被触发时，所有等待这个fd的线程或进程都被唤醒。一般都是socket的accept()会导致惊群，很多个进程都block在server socket的accept()，一但有客户端进来，所有进程accept()都会返回，但是只有一个进程会读到数据，就是惊群。</p></blockquote><p><code>愿有前程可奔赴 亦有岁月可回首。</code></p><p>参考链接：<a href="https://www.cnblogs.com/lianghui-lianghui/articles/10216471.html" target="_blank" rel="noopener">配置文件详细解析</a><a href="http://nginx.org/en/docs/" target="_blank" rel="noopener">官方文档</a> <a href="https://www.cnblogs.com/yanglei-xyz/p/10600707.html" target="_blank" rel="noopener">docker配置nginx反向代理tomcat</a></p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot集成Aop</title>
      <link href="/2020/07/07/springbootaop/"/>
      <url>/2020/07/07/springbootaop/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot应用中使用AOP记录接口访问日志"><a href="#SpringBoot应用中使用AOP记录接口访问日志" class="headerlink" title="SpringBoot应用中使用AOP记录接口访问日志"></a>SpringBoot应用中使用AOP记录接口访问日志</h1><blockquote><p>本文主要讲述AOP在mall项目中的应用，通过在controller层建一个切面来实现接口访问的统一日志记录。</p></blockquote><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><blockquote><p>AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p></blockquote><h3 id="AOP的相关术语"><a href="#AOP的相关术语" class="headerlink" title="AOP的相关术语"></a>AOP的相关术语</h3><h4 id="通知（Advice）"><a href="#通知（Advice）" class="headerlink" title="通知（Advice）"></a>通知（Advice）</h4><p>通知描述了切面要完成的工作以及何时执行。比如我们的日志切面需要记录每个接口调用时长，就需要在接口调用前后分别记录当前时间，再取差值。</p><ul><li>前置通知（Before）：在目标方法调用前调用通知功能；</li><li>后置通知（After）：在目标方法调用之后调用通知功能，不关心方法的返回结果；</li><li>返回通知（AfterReturning）：在目标方法成功执行之后调用通知功能；</li><li>异常通知（AfterThrowing）：在目标方法抛出异常后调用通知功能；</li><li>环绕通知（Around）：通知包裹了目标方法，在目标方法调用之前和之后执行自定义的行为。</li></ul><h4 id="连接点（JoinPoint）"><a href="#连接点（JoinPoint）" class="headerlink" title="连接点（JoinPoint）"></a>连接点（JoinPoint）</h4><p>通知功能被应用的时机。比如接口方法被调用的时候就是日志切面的连接点。</p><h4 id="切点（Pointcut）"><a href="#切点（Pointcut）" class="headerlink" title="切点（Pointcut）"></a>切点（Pointcut）</h4><p>切点定义了通知功能被应用的范围。比如日志切面的应用范围就是所有接口，即所有controller层的接口方法。</p><h4 id="切面（Aspect）"><a href="#切面（Aspect）" class="headerlink" title="切面（Aspect）"></a>切面（Aspect）</h4><p>切面是通知和切点的结合，定义了何时、何地应用通知功能。</p><h4 id="引入（Introduction）"><a href="#引入（Introduction）" class="headerlink" title="引入（Introduction）"></a>引入（Introduction）</h4><p>在无需修改现有类的情况下，向现有的类添加新方法或属性。</p><h4 id="织入（Weaving）"><a href="#织入（Weaving）" class="headerlink" title="织入（Weaving）"></a>织入（Weaving）</h4><p>把切面应用到目标对象并创建新的代理对象的过程。</p><h2 id="Spring中使用注解创建切面"><a href="#Spring中使用注解创建切面" class="headerlink" title="Spring中使用注解创建切面"></a>Spring中使用注解创建切面</h2><h3 id="相关注解"><a href="#相关注解" class="headerlink" title="相关注解"></a>相关注解</h3><ul><li>@Aspect：用于定义切面</li><li>@Before：通知方法会在目标方法调用之前执行</li><li>@After：通知方法会在目标方法返回或抛出异常后执行</li><li>@AfterReturning：通知方法会在目标方法返回后执行</li><li>@AfterThrowing：通知方法会在目标方法抛出异常后执行</li><li>@Around：通知方法会将目标方法封装起来</li><li>@Pointcut：定义切点表达式</li></ul><h3 id="切点表达式"><a href="#切点表达式" class="headerlink" title="切点表达式"></a>切点表达式</h3><p>指定了通知被应用的范围，表达式格式：</p><pre class=" language-java"><code class="language-java"><span class="token function">execution</span><span class="token punctuation">(</span>方法修饰符 返回类型 方法所属的包<span class="token punctuation">.</span>类名<span class="token punctuation">.</span>方法名称<span class="token punctuation">(</span>方法参数<span class="token punctuation">)</span><span class="token punctuation">)</span>    通配符：<span class="token operator">*</span>      <span class="token number">1</span>）匹配一个或多个字符      <span class="token number">2</span>）匹配任意一个参数      <span class="token number">3</span>）只能匹配一层路径      <span class="token number">4</span>）权限位置不能写<span class="token operator">*</span> 权限位置不写就行       <span class="token punctuation">.</span><span class="token punctuation">.</span>      <span class="token number">1</span><span class="token punctuation">)</span>匹配任意多个任意类型的参数      <span class="token number">2</span>）匹配任意多层路径</code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//com.codelnn.mall.controller包中所有类的public方法都应用切面里的通知</span><span class="token function">execution</span><span class="token punctuation">(</span><span class="token keyword">public</span> <span class="token operator">*</span> com<span class="token punctuation">.</span>codelnn<span class="token punctuation">.</span>mall<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//com.codelnn.mall.service包及其子包下所有类中的所有方法都应用切面里的通知</span><span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> com<span class="token punctuation">.</span>codelnn<span class="token punctuation">.</span>mall<span class="token punctuation">.</span>service<span class="token punctuation">.</span><span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//com.codelnn.mall.service.PmsBrandService类中的所有方法都应用切面里的通知</span><span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> com<span class="token punctuation">.</span>codelnn<span class="token punctuation">.</span>mall<span class="token punctuation">.</span>service<span class="token punctuation">.</span>PmsBrandService<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="添加AOP切面实现接口日志记录"><a href="#添加AOP切面实现接口日志记录" class="headerlink" title="添加AOP切面实现接口日志记录"></a>添加AOP切面实现接口日志记录</h2><h3 id="添加日志信息封装类WebLog"><a href="#添加日志信息封装类WebLog" class="headerlink" title="添加日志信息封装类WebLog"></a>添加日志信息封装类WebLog</h3><blockquote><p>用于封装需要记录的日志信息，包括操作的描述、时间、消耗时间、url、请求参数和返回结果等信息。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>codelnn<span class="token punctuation">.</span>mall<span class="token punctuation">.</span>dto<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>NoArgsConstructor<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @description: * @author: znx * @create: 2020-07-05 21:43 **/</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebLog</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 操作描述     */</span>    <span class="token keyword">private</span> String description<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 操作用户     */</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 操作时间     */</span>    <span class="token keyword">private</span> Long startTime<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 消耗时间     */</span>    <span class="token keyword">private</span> Integer spendTime<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根路径     */</span>    <span class="token keyword">private</span> String basePath<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * URI     */</span>    <span class="token keyword">private</span> String uri<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * URL     */</span>    <span class="token keyword">private</span> String url<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 请求类型     */</span>    <span class="token keyword">private</span> String method<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * IP地址     */</span>    <span class="token keyword">private</span> String ip<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 请求参数     */</span>    <span class="token keyword">private</span> Object parameter<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 请求返回的结果     */</span>    <span class="token keyword">private</span> Object result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="添加切面类WebLogAspect"><a href="#添加切面类WebLogAspect" class="headerlink" title="添加切面类WebLogAspect"></a>添加切面类WebLogAspect</h3><blockquote><p>定义了一个日志切面，在环绕通知中获取日志需要的信息，并应用到controller层中所有的public方法中去。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>codelnn<span class="token punctuation">.</span>mall<span class="token punctuation">.</span>component<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>util<span class="token punctuation">.</span>StrUtil<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>util<span class="token punctuation">.</span>URLUtil<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>json<span class="token punctuation">.</span>JSONUtil<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>codelnn<span class="token punctuation">.</span>mall<span class="token punctuation">.</span>dto<span class="token punctuation">.</span>WebLog<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>ApiOperation<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ProceedingJoinPoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Signature<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>MethodSignature<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Order<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestBody<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestParam<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>request<span class="token punctuation">.</span>RequestContextHolder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>request<span class="token punctuation">.</span>ServletRequestAttributes<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Parameter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @description: * @author: znx * @create: 2020-07-05 21:44 **/</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebLogAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(public * com.codelnn.mall.controller.PmsBrandController.listBrand(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">webLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"webLog()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// System.out.println("listBrand开始运行啦！！！！");</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"webLog()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// System.out.println("listBrand 运行完了哈哈哈");</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"webLog()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">around</span><span class="token punctuation">(</span>ProceedingJoinPoint joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable<span class="token punctuation">{</span>        <span class="token keyword">long</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取请求对象</span>        ServletRequestAttributes attributes <span class="token operator">=</span>  <span class="token punctuation">(</span>ServletRequestAttributes<span class="token punctuation">)</span>RequestContextHolder<span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HttpServletRequest request <span class="token operator">=</span>  attributes<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        WebLog webLog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//被切面的方法开始执行</span>        Object result <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Signature signature <span class="token operator">=</span>  joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MethodSignature methodSignature <span class="token operator">=</span> <span class="token punctuation">(</span>MethodSignature<span class="token punctuation">)</span> signature<span class="token punctuation">;</span>        Method method <span class="token operator">=</span> methodSignature<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>ApiOperation<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ApiOperation apiOperation <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>ApiOperation<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            webLog<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span>apiOperation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> endTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String url <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        webLog<span class="token punctuation">.</span><span class="token function">setBasePath</span><span class="token punctuation">(</span>StrUtil<span class="token punctuation">.</span><span class="token function">removeSuffix</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> URLUtil<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        webLog<span class="token punctuation">.</span><span class="token function">setIp</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getRemoteUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        webLog<span class="token punctuation">.</span><span class="token function">setMethod</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取请求参数及其值</span>        webLog<span class="token punctuation">.</span><span class="token function">setParameter</span><span class="token punctuation">(</span><span class="token function">getParameter</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span>joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        webLog<span class="token punctuation">.</span><span class="token function">setResult</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        webLog<span class="token punctuation">.</span><span class="token function">setSpendTime</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        webLog<span class="token punctuation">.</span><span class="token function">setStartTime</span><span class="token punctuation">(</span>startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        webLog<span class="token punctuation">.</span><span class="token function">setUri</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        webLog<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> JSONUtil<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>webLog<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Object <span class="token function">getParameter</span><span class="token punctuation">(</span>Method method<span class="token punctuation">,</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Parameter<span class="token punctuation">[</span><span class="token punctuation">]</span> parameters <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> parameters<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//将RequestBody注解修饰的参数作为请求参数</span>            RequestBody requestBody <span class="token operator">=</span> parameters<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>RequestBody<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>requestBody <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//将RequestParam注解修饰的参数作为请求参数</span>            RequestParam requestParam <span class="token operator">=</span> parameters<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>RequestParam<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>requestParam <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String key <span class="token operator">=</span> parameters<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>requestParam<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//获取请求参数</span>                    key <span class="token operator">=</span> requestParam<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> list<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="疑难点API解析"><a href="#疑难点API解析" class="headerlink" title="疑难点API解析"></a>疑难点API解析</h3><p><code>StrUtil.removeSuffix</code>： 去掉字符串后缀</p><pre class=" language-java"><code class="language-java">String fileName <span class="token operator">=</span> StrUtil<span class="token punctuation">.</span><span class="token function">removeSuffix</span><span class="token punctuation">(</span><span class="token string">"pretty_girl.jpg"</span><span class="token punctuation">,</span> <span class="token string">".jpg"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//fileName -> pretty_girl</span></code></pre><p><code>URLUtil.url</code> : 通过一个字符串形式的URL地址创建URL对象</p><p><code>JoinPoint</code>：JoinPoint对象封装了SpringAop中切面方法的信息,在切面方法中添加JoinPoint参数,就可以<strong>获取到封装了该方法信息的JoinPoint对象</strong>。</p><p><strong>常用API</strong></p><table><thead><tr><th>方法名</th><th>功能</th></tr></thead><tbody><tr><td>Signature getSignature();</td><td>获取封装了署名信息的对象,在该对象中可以获取到目标方法名,所属类的Class等信息</td></tr><tr><td>Object[] getArgs();</td><td>获取传入目标方法的参数对象</td></tr><tr><td>Object getTarget();</td><td>获取被代理的对象</td></tr><tr><td>Object getThis();</td><td>获取代理对象</td></tr></tbody></table><p><code>ProceedingJoinPoint</code>：ProceedingJoinPoint对象是JoinPoint的子接口,该对象<strong>只用在@Around的切面方法</strong>中。添加了以下两个方法。</p><pre class=" language-java"><code class="language-java">Object <span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token comment" spellcheck="true">//执行目标方法 </span>Object <span class="token function">proceed</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token comment" spellcheck="true">//传入的新的参数去执行目标方法 </span></code></pre><h2 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h2><p><img src="https://gitee.com/codelnn/ImageHosting/raw/master/image/springboot_aop.png" alt></p><p>可以看到控制住台中会打印如下日志信息：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"result"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span>      <span class="token property">"totalPage"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>      <span class="token property">"pageSize"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      <span class="token property">"list"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"productCommentCount"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>          <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"万和"</span><span class="token punctuation">,</span>          <span class="token property">"bigPic"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>          <span class="token property">"logo"</span><span class="token operator">:</span> <span class="token string">"http://macro-oss.oss-cn-shenzhen.aliyuncs.com/mall/images/20180607/timg(5).jpg"</span><span class="token punctuation">,</span>          <span class="token property">"showStatus"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>          <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>          <span class="token property">"sort"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>          <span class="token property">"productCount"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>          <span class="token property">"firstLetter"</span><span class="token operator">:</span> <span class="token string">"W"</span><span class="token punctuation">,</span>          <span class="token property">"factoryStatus"</span><span class="token operator">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"productCommentCount"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>          <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"三星"</span><span class="token punctuation">,</span>          <span class="token property">"logo"</span><span class="token operator">:</span> <span class="token string">"http://macro-oss.oss-cn-shenzhen.aliyuncs.com/mall/images/20180607/timg (1).jpg"</span><span class="token punctuation">,</span>          <span class="token property">"showStatus"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>          <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>          <span class="token property">"sort"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>          <span class="token property">"productCount"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>          <span class="token property">"firstLetter"</span><span class="token operator">:</span> <span class="token string">"S"</span><span class="token punctuation">,</span>          <span class="token property">"factoryStatus"</span><span class="token operator">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"productCommentCount"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>          <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>          <span class="token property">"logo"</span><span class="token operator">:</span> <span class="token string">"http://macro-oss.oss-cn-shenzhen.aliyuncs.com/mall/images/20190129/17f2dd9756d9d333bee8e60ce8c03e4c_222_222.jpg"</span><span class="token punctuation">,</span>          <span class="token property">"showStatus"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>          <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>          <span class="token property">"sort"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>          <span class="token property">"productCount"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>          <span class="token property">"firstLetter"</span><span class="token operator">:</span> <span class="token string">"H"</span><span class="token punctuation">,</span>          <span class="token property">"factoryStatus"</span><span class="token operator">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"pageNum"</span><span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">"操作成功"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"basePath"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080"</span><span class="token punctuation">,</span>  <span class="token property">"method"</span><span class="token operator">:</span> <span class="token string">"GET"</span><span class="token punctuation">,</span>  <span class="token property">"ip"</span><span class="token operator">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span>  <span class="token property">"parameter"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"pageNum"</span><span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"pageSize"</span><span class="token operator">:</span> <span class="token number">3</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"分页查询品牌列表"</span><span class="token punctuation">,</span>  <span class="token property">"startTime"</span><span class="token operator">:</span> <span class="token number">1594026323466</span><span class="token punctuation">,</span>  <span class="token property">"uri"</span><span class="token operator">:</span> <span class="token string">"/brand/list"</span><span class="token punctuation">,</span>  <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/brand/list"</span><span class="token punctuation">,</span>  <span class="token property">"spendTime"</span><span class="token operator">:</span> <span class="token number">211</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aop切面 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>annotation</title>
      <link href="/2020/07/02/annotation/"/>
      <url>/2020/07/02/annotation/</url>
      
        <content type="html"><![CDATA[<h1 id="Java注解（Annotation）"><a href="#Java注解（Annotation）" class="headerlink" title="Java注解（Annotation）"></a>Java注解（Annotation）</h1><h2 id="什么是注解？"><a href="#什么是注解？" class="headerlink" title="什么是注解？"></a>什么是注解？</h2><p><em>Annotation</em>是<em>Java</em>5开始引入的新特征，中文名称叫<strong>注解</strong>。它用来将<strong>元数据</strong>（<em>metadata</em>）与程序元素（类、方法、成员变量等）进行关联。注解为我们在代码中<strong>添加信息提供了一种形式化的方法</strong>，使我们可以在稍后某个时刻非常方便地使用这些数据。</p><p><em>Java</em>注解是附加在代码中的一些元数据，用于一些工具编译、运行时进行解析<strong>通过反射</strong>和使用，起到说明、配置的功能。<strong>注解不能直接干扰程序代码的运行，无论增加或者删除注解，代码都能正常运行</strong>。</p><h2 id="注解的用处"><a href="#注解的用处" class="headerlink" title="注解的用处"></a>注解的用处</h2><ol><li>编写文档：通过代码里标识的元数据生成文档。常见有@<em>param</em> @<em>return</em>等。</li><li>代码分析：通过代码里面标识元数据对代码进行分析。</li><li>编译检查：通过代码里标识的元数据让编译器能实现基本的编译检查。</li></ol><h2 id="系统注解"><a href="#系统注解" class="headerlink" title="系统注解"></a>系统注解</h2><h3 id="标准注解"><a href="#标准注解" class="headerlink" title="标准注解"></a>标准注解</h3><p><em>Java</em>提供了5个基本的注解用法</p><ul><li><p>@<em>Override</em>：限定重写父类方法，它可以强制一个子类必须覆盖父类的方法。写在子类的方法上，在编译期，编译器检查这个方法，检查父类必须包含该方法，否则编译出错。<strong>该注解只能修饰方法，在编译期被读取</strong>。</p></li><li><p>@<em>Deprecated</em>：用于表示某个程序元素已过时或者可能运行时出现问题。<strong>编译时读取，编译器编译到过时元素会给出警告</strong>。</p></li><li><p>@<em>SuppressWarnings</em>：抑制编译警告。<strong>被该注解修饰的程序元素（以及该程序元素中的所有子元素）取消显式指定的编译警告</strong>。</p></li><li><p>@SafeVarargs：<em>Java</em>7新增，<strong>去除“堆污染”警告</strong>。<strong>堆污染</strong>——-把一个不带泛型的对象赋值给一个带泛型的变量时就会发生堆污染。</p><pre class=" language-java"><code class="language-java">List l2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Number<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> ls <span class="token operator">=</span> l2<span class="token punctuation">;</span> Arrays源代码<span class="token annotation punctuation">@SafeVarargs</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"varargs"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">asList</span><span class="token punctuation">(</span>T<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>@<em>FunctionInterface</em>：<em>Java</em>8新增，修饰函数式接口。<strong>使用该注解修饰的接口必须是函数式接口，不然编译会出错</strong>。<strong>函数式接口</strong>——如果接口中只有一个抽象方法（可以包含多个<em>default</em>方法或者<em>static</em>方法），就是函数式接口。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Functionlnterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FunInterface</span><span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"foo类方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bar默认方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只定义一个抽象方法，默认public</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><p>元注解：和元数据一样，修饰注解的注解。</p><ul><li><p>@Target（目标）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>ANNOTATION_TYPE<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Target</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Returns an array of the kinds of elements an annotation type     * can be applied to.     * @return an array of the kinds of elements an annotation type     * can be applied to     */</span>    ElementType<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>用于指定被修饰的注解能用于哪些程序元素上。它包含一个名为value的成员变量，取值如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> ElementType <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/** Class, interface (including annotation type), or enum declaration */</span>    TYPE<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Field declaration (includes enum constants) */</span>    FIELD<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Method declaration */</span>    METHOD<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Formal parameter declaration */</span>    PARAMETER<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Constructor declaration */</span>    CONSTRUCTOR<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Local variable declaration */</span>    LOCAL_VARIABLE<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Annotation type declaration */</span>    ANNOTATION_TYPE<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Package declaration */</span>    PACKAGE<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * Type parameter declaration     *     * @since 1.8     */</span>    TYPE_PARAMETER<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * Use of a type     *     * @since 1.8     */</span>    TYPE_USE<span class="token punctuation">}</span></code></pre></li><li><p>@Retention（保留）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>ANNOTATION_TYPE<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Retention</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Returns the retention policy.     * @return the retention policy     */</span>    RetentionPolicy <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>用于指定被修饰注解的生命周期。它包含一个value的成员变量，取值如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> RetentionPolicy <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Annotations are to be discarded by the compiler.     */</span>    SOURCE<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * Annotations are to be recorded in the class file by the compiler     * but need not be retained by the VM at run time.  This is the default     * behavior.     */</span>    CLASS<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * Annotations are to be recorded in the class file by the compiler and     * retained by the VM at run time, so they may be read reflectively.     *     * @see java.lang.reflect.AnnotatedElement     */</span>    RUNTIME<span class="token punctuation">}</span></code></pre><table><thead><tr><th>SOURCE</th><th>在编译阶段被丢弃。这些注解在编译结束之后就不再有任何意义，所以它们不会写入字节码文件。@Override、@SuppressWarnings都属于这类注解。</th></tr></thead><tbody><tr><td>CLASS</td><td>在类加载的时候丢弃。在字节码文件的处理中有用。注解默认使用这种方式。</td></tr><tr><td>RUNTIME</td><td>始终不会丢弃，运行期也保留该注解，因此可以使用反射机制读取该注解信息。</td></tr></tbody></table></li><li><p>@Documented</p><p>用于指定被修饰的注解将被Javadoc工具取成文档，即说明该注解将被包含在Javadoc中。</p></li><li><p>@Inherited</p><p>用于指定被修饰的注解具有继承性。即子类可以继承父类中的该注解。</p></li></ul><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><p> 使用关键字@interface</p><p> <strong>注解元素数据类型</strong></p><ol><li>所有基本类型（int、float、boolean等）</li><li>String</li><li>Class</li><li>enum</li><li>Annotation</li><li>以上类型的数组</li></ol><h3 id="一个简单的注解"><a href="#一个简单的注解" class="headerlink" title="一个简单的注解"></a>一个简单的注解</h3><pre class=" language-java"><code class="language-java">@<span class="token keyword">interface</span> <span class="token class-name">test</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>默认情况下，注解可以修饰任何程序元素（类、方法、接口、属性）等。</p><h3 id="带成员变量的注解"><a href="#带成员变量的注解" class="headerlink" title="带成员变量的注解"></a>带成员变量的注解</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">DBTable</span> <span class="token punctuation">{</span>     String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@DBTable</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"student"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p><strong>以无形参的方法形式来声明注解的成员变量</strong>。使用default关键字设置初始值，没设置初始值的变量则使用时<code>必须</code>提供，有初始值的变量可以设置也可以不设置。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ul><li>没有成员变量的注解 —-标记注解（marker annotation）<strong>这种注解仅利用自身的存在与否来提供信息</strong>。</li><li>有成员变量的注解—-单值注解、完整注解 <strong>这种注解提供更多元数据</strong>。</li></ul><h2 id="获取注解信息"><a href="#获取注解信息" class="headerlink" title="获取注解信息"></a>获取注解信息</h2><p><strong>思路：通过反射获取注解，将注解转换成具体的注解类，在调用注解类定义的方法获取元数据信息。</strong></p><p>java.lang.reflect.AnnotatedElement接口 代表程序中可以接受注解的程序元素。常见实现类：</p><ul><li>Class：类定义</li><li>Constructor：构造器定义</li><li>Field：类的成员属性定义</li><li>Method：类的方法定义</li><li>Package：类的包定义</li></ul><p>AnnotatedElement接口获取注解信息的方法如下：</p><ul><li><ul><li><table><thead><tr><th>Modifier and Type</th><th>Method and Description</th></tr></thead><tbody><tr><td><code>&lt;T extends Annotation&gt;T</code></td><td><code>getAnnotation(Class&lt;T&gt; annotationClass)</code>  返回该元素的，如果这样的注释 <em>，</em>否则返回null指定类型的注释。</td></tr><tr><td><code>Annotation[]</code></td><td><code>getAnnotations()</code>  返回此元素上 <em>存在的</em>注释。</td></tr><tr><td><code>default &lt;T extends Annotation&gt;T[]</code></td><td><code>getAnnotationsByType(Class&lt;T&gt; annotationClass)</code>  返回与此元素相关 <em>联的注释</em> 。</td></tr><tr><td><code>default &lt;T extends Annotation&gt;T</code></td><td><code>getDeclaredAnnotation(Class&lt;T&gt; annotationClass)</code>  如果这样的注释 <em>直接存在</em> ，则返回指定类型的元素注释，否则返回null。</td></tr><tr><td><code>Annotation[]</code></td><td><code>getDeclaredAnnotations()</code>  返回 <em>直接存在</em>于此元素上的注释。</td></tr><tr><td><code>default &lt;T extends Annotation&gt;T[]</code></td><td><code>getDeclaredAnnotationsByType(Class&lt;T&gt; annotationClass)</code>  如果此类注释 <em>直接存在</em>或 <em>间接存在，</em>则返回该元素的注释（指定类型）。</td></tr><tr><td><code>default boolean</code></td><td><code>isAnnotationPresent(Class&lt;?  extends Annotation&gt; annotationClass)</code>  如果此元素上 <em>存在</em>指定类型的注释，则返回true，否则返回false。</td></tr></tbody></table></li></ul></li></ul><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p><strong>注解处理器</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">DBField</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">clazz</span> <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Field field <span class="token operator">:</span> fields<span class="token punctuation">)</span><span class="token punctuation">{</span>           DBField dbField <span class="token operator">=</span>  field<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>DBField<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id = "</span><span class="token operator">+</span>dbField<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span><span class="token string">"value = "</span><span class="token operator">+</span>dbField<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>打算在springboot中使用注解来实现一些功能</p>]]></content>
      
      
      <categories>
          
          <category> Java语言基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
