<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>annotation</title>
      <link href="/blogs/2020/07/02/annotation/"/>
      <url>/blogs/2020/07/02/annotation/</url>
      
        <content type="html"><![CDATA[<h1 id="Java注解（Annotation）"><a href="#Java注解（Annotation）" class="headerlink" title="Java注解（Annotation）"></a>Java注解（Annotation）</h1><h2 id="什么是注解？"><a href="#什么是注解？" class="headerlink" title="什么是注解？"></a>什么是注解？</h2><p><em>Annotation</em>是<em>Java</em>5开始引入的新特征，中文名称叫<strong>注解</strong>。它用来将<strong>元数据</strong>（<em>metadata</em>）与程序元素（类、方法、成员变量等）进行关联。注解为我们在代码中<strong>添加信息提供了一种形式化的方法</strong>，使我们可以在稍后某个时刻非常方便地使用这些数据。</p><p><em>Java</em>注解是附加在代码中的一些元数据，用于一些工具编译、运行时进行解析<strong>通过反射</strong>和使用，起到说明、配置的功能。<strong>注解不能直接干扰程序代码的运行，无论增加或者删除注解，代码都能正常运行</strong>。</p><h2 id="注解的用处"><a href="#注解的用处" class="headerlink" title="注解的用处"></a>注解的用处</h2><ol><li>编写文档：通过代码里标识的元数据生成文档。常见有@<em>param</em> @<em>return</em>等。</li><li>代码分析：通过代码里面标识元数据对代码进行分析。</li><li>编译检查：通过代码里标识的元数据让编译器能实现基本的编译检查。</li></ol><h2 id="系统注解"><a href="#系统注解" class="headerlink" title="系统注解"></a>系统注解</h2><h3 id="标准注解"><a href="#标准注解" class="headerlink" title="标准注解"></a>标准注解</h3><p><em>Java</em>提供了5个基本的注解用法</p><ul><li><p>@<em>Override</em>：限定重写父类方法，它可以强制一个子类必须覆盖父类的方法。写在子类的方法上，在编译期，编译器检查这个方法，检查父类必须包含该方法，否则编译出错。<strong>该注解只能修饰方法，在编译期被读取</strong>。</p></li><li><p>@<em>Deprecated</em>：用于表示某个程序元素已过时或者可能运行时出现问题。<strong>编译时读取，编译器编译到过时元素会给出警告</strong>。</p></li><li><p>@<em>SuppressWarnings</em>：抑制编译警告。<strong>被该注解修饰的程序元素（以及该程序元素中的所有子元素）取消显式指定的编译警告</strong>。</p></li><li><p>@SafeVarargs：<em>Java</em>7新增，<strong>去除“堆污染”警告</strong>。<strong>堆污染</strong>——-把一个不带泛型的对象赋值给一个带泛型的变量时就会发生堆污染。</p><pre class=" language-java"><code class="language-java">List l2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Number<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> ls <span class="token operator">=</span> l2<span class="token punctuation">;</span> Arrays源代码<span class="token annotation punctuation">@SafeVarargs</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"varargs"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">asList</span><span class="token punctuation">(</span>T<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>@<em>FunctionInterface</em>：<em>Java</em>8新增，修饰函数式接口。<strong>使用该注解修饰的接口必须是函数式接口，不然编译会出错</strong>。<strong>函数式接口</strong>——如果接口中只有一个抽象方法（可以包含多个<em>default</em>方法或者<em>static</em>方法），就是函数式接口。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Functionlnterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FunInterface</span><span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"foo类方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bar默认方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只定义一个抽象方法，默认public</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><p>元注解：和元数据一样，修饰注解的注解。</p><ul><li><p>@Target（目标）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>ANNOTATION_TYPE<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Target</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Returns an array of the kinds of elements an annotation type     * can be applied to.     * @return an array of the kinds of elements an annotation type     * can be applied to     */</span>    ElementType<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>用于指定被修饰的注解能用于哪些程序元素上。它包含一个名为value的成员变量，取值如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> ElementType <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/** Class, interface (including annotation type), or enum declaration */</span>    TYPE<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Field declaration (includes enum constants) */</span>    FIELD<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Method declaration */</span>    METHOD<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Formal parameter declaration */</span>    PARAMETER<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Constructor declaration */</span>    CONSTRUCTOR<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Local variable declaration */</span>    LOCAL_VARIABLE<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Annotation type declaration */</span>    ANNOTATION_TYPE<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Package declaration */</span>    PACKAGE<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * Type parameter declaration     *     * @since 1.8     */</span>    TYPE_PARAMETER<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * Use of a type     *     * @since 1.8     */</span>    TYPE_USE<span class="token punctuation">}</span></code></pre></li><li><p>@Retention（保留）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>ANNOTATION_TYPE<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Retention</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Returns the retention policy.     * @return the retention policy     */</span>    RetentionPolicy <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>用于指定被修饰注解的生命周期。它包含一个value的成员变量，取值如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> RetentionPolicy <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Annotations are to be discarded by the compiler.     */</span>    SOURCE<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * Annotations are to be recorded in the class file by the compiler     * but need not be retained by the VM at run time.  This is the default     * behavior.     */</span>    CLASS<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * Annotations are to be recorded in the class file by the compiler and     * retained by the VM at run time, so they may be read reflectively.     *     * @see java.lang.reflect.AnnotatedElement     */</span>    RUNTIME<span class="token punctuation">}</span></code></pre><table><thead><tr><th>SOURCE</th><th>在编译阶段被丢弃。这些注解在编译结束之后就不再有任何意义，所以它们不会写入字节码文件。@Override、@SuppressWarnings都属于这类注解。</th></tr></thead><tbody><tr><td>CLASS</td><td>在类加载的时候丢弃。在字节码文件的处理中有用。注解默认使用这种方式。</td></tr><tr><td>RUNTIME</td><td>始终不会丢弃，运行期也保留该注解，因此可以使用反射机制读取该注解信息。</td></tr></tbody></table></li><li><p>@Documented</p><p>用于指定被修饰的注解将被Javadoc工具取成文档，即说明该注解将被包含在Javadoc中。</p></li><li><p>@Inherited</p><p>用于指定被修饰的注解具有继承性。即子类可以继承父类中的该注解。</p></li></ul><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><p> 使用关键字@interface</p><p> <strong>注解元素数据类型</strong></p><ol><li>所有基本类型（int、float、boolean等）</li><li>String</li><li>Class</li><li>enum</li><li>Annotation</li><li>以上类型的数组</li></ol><h3 id="一个简单的注解"><a href="#一个简单的注解" class="headerlink" title="一个简单的注解"></a>一个简单的注解</h3><pre class=" language-java"><code class="language-java">@<span class="token keyword">interface</span> <span class="token class-name">test</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>默认情况下，注解可以修饰任何程序元素（类、方法、接口、属性）等。</p><h3 id="带成员变量的注解"><a href="#带成员变量的注解" class="headerlink" title="带成员变量的注解"></a>带成员变量的注解</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">DBTable</span> <span class="token punctuation">{</span>     String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@DBTable</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"student"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p><strong>以无形参的方法形式来声明注解的成员变量</strong>。使用default关键字设置初始值，没设置初始值的变量则使用时==必须==提供，有初始值的变量可以设置也可以不设置。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ul><li>没有成员变量的注解 —-标记注解（marker annotation）<strong>这种注解仅利用自身的存在与否来提供信息</strong>。</li><li>有成员变量的注解—-单值注解、完整注解 <strong>这种注解提供更多元数据</strong>。</li></ul><h2 id="获取注解信息"><a href="#获取注解信息" class="headerlink" title="获取注解信息"></a>获取注解信息</h2><p><strong>思路：通过反射获取注解，将注解转换成具体的注解类，在调用注解类定义的方法获取元数据信息。</strong></p><p>java.lang.reflect.AnnotatedElement接口 代表程序中可以接受注解的程序元素。常见实现类：</p><ul><li>Class：类定义</li><li>Constructor：构造器定义</li><li>Field：类的成员属性定义</li><li>Method：类的方法定义</li><li>Package：类的包定义</li></ul><p>AnnotatedElement接口获取注解信息的方法如下：</p><ul><li><ul><li><table><thead><tr><th>Modifier and Type</th><th>Method and Description</th></tr></thead><tbody><tr><td><code>&lt;T extends Annotation&gt;T</code></td><td><code>getAnnotation(Class&lt;T&gt; annotationClass)</code>  返回该元素的，如果这样的注释 <em>，</em>否则返回null指定类型的注释。</td></tr><tr><td><code>Annotation[]</code></td><td><code>getAnnotations()</code>  返回此元素上 <em>存在的</em>注释。</td></tr><tr><td><code>default &lt;T extends Annotation&gt;T[]</code></td><td><code>getAnnotationsByType(Class&lt;T&gt; annotationClass)</code>  返回与此元素相关 <em>联的注释</em> 。</td></tr><tr><td><code>default &lt;T extends Annotation&gt;T</code></td><td><code>getDeclaredAnnotation(Class&lt;T&gt; annotationClass)</code>  如果这样的注释 <em>直接存在</em> ，则返回指定类型的元素注释，否则返回null。</td></tr><tr><td><code>Annotation[]</code></td><td><code>getDeclaredAnnotations()</code>  返回 <em>直接存在</em>于此元素上的注释。</td></tr><tr><td><code>default &lt;T extends Annotation&gt;T[]</code></td><td><code>getDeclaredAnnotationsByType(Class&lt;T&gt; annotationClass)</code>  如果此类注释 <em>直接存在</em>或 <em>间接存在，</em>则返回该元素的注释（指定类型）。</td></tr><tr><td><code>default boolean</code></td><td><code>isAnnotationPresent(Class&lt;?  extends Annotation&gt; annotationClass)</code>  如果此元素上 <em>存在</em>指定类型的注释，则返回true，否则返回false。</td></tr></tbody></table></li></ul></li></ul><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p><strong>注解处理器</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">DBField</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">clazz</span> <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Field field <span class="token operator">:</span> fields<span class="token punctuation">)</span><span class="token punctuation">{</span>           DBField dbField <span class="token operator">=</span>  field<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>DBField<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id = "</span><span class="token operator">+</span>dbField<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span><span class="token string">"value = "</span><span class="token operator">+</span>dbField<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>打算在springboot中使用注解来实现一些功能</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
